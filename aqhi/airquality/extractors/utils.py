# Helpers for retrieving files from OS


def calc_freq(info_dicts):
    """
    Calculate value frequency in a collection of info dicts generated by extract_info function.

    :param info_dicts: an iterable collection of info dicts
    :return: a dict showing the frequency of values
    """
    info_iter = iter(info_dicts)
    for i, info_dict in enumerate(info_iter):
        if i == 0:
            freq_dict = {}
            list_flags = {}
            for info_name in info_dict:
                info_rows = info_dict[info_name]
                freq_dict[info_name] = {}
                if isinstance(info_rows[0], list):
                    list_flags[info_name] = True
                    for i in range(len(info_rows[0])):
                        freq_dict[info_name][i] = {}
                else:
                    list_flags[info_name] = False

        for info_name in info_dict:
            if list_flags[info_name]:
                # Count list
                for row in info_dict[info_name]:
                    for i in range(len(row)):
                        item = row[i]
                        try:
                            float(item)
                        except ValueError:
                            # not a num
                            if item in freq_dict[info_name][i]:
                                freq_dict[info_name][i][item] += 1
                            else:
                                freq_dict[info_name][i][item] = 1
                            continue
                        # a num
                        if 'num' in freq_dict[info_name][i]:
                            freq_dict[info_name][i]['num'] += 1
                        else:
                            freq_dict[info_name][i]['num'] = 1
            else:
                for item in info_dict[info_name]:
                    try:
                        float(item)
                    except ValueError:
                        # not a num
                        if item in freq_dict[info_name]:
                            freq_dict[info_name][item] += 1
                        else:
                            freq_dict[info_name][item] = 1
                        continue
                    # a num
                    if 'num' in freq_dict[info_name]:
                        freq_dict[info_name]['num'] += 1
                    else:
                        freq_dict[info_name]['num'] = 1

    return freq_dict


def aggregate_keys_with_one_freq(freq_dict, threshold=1):
    """
    Simplify the frequency dictionary returned by calc_freq
    """

    def check_and_aggregate(dict_to_check, threshold=1):
        keys_to_del = []
        dict_to_check['single_value_keys'] = 0
        for k, v in dict_to_check.items():
            if k != 'single_value_keys' and v == 1:
                keys_to_del.append(k)
                dict_to_check['single_value_keys'] += 1
        if dict_to_check['single_value_keys'] < threshold:
            keys_to_del.clear()
            keys_to_del.append('single_value_keys')

        for k in keys_to_del:
            del dict_to_check[k]

    for k1, v1 in freq_dict.items():
        for k2, v2 in v1.items():
            if isinstance(k2, int):
                # nested info dict
                is_nested = True
                check_and_aggregate(v2, threshold)
            elif isinstance(k2, str):
                # one dimension dict
                is_nested = False
                break
            else:
                raise ValueError('freq_dict is of valid structure.')

        if is_nested is False:
            check_and_aggregate(v1, threshold)

    return freq_dict


